#ifndef SCIF_UC3_H
#define SCIF_UC3_H

#include <stdint.h>

#define AVR32_SCIF_GCLK_CANIF              1
#define AVR32_SCIF_GC_NO_DIV_CLOCK         0


#define AVR32_SCIF_GC_USES_CLK_SLOW	0
#define AVR32_SCIF_GC_USES_CLK_32 1
#define AVR32_SCIF_GC_USES_OSC0 3
#define AVR32_SCIF_GC_USES_OSC1 4
#define AVR32_SCIF_GC_USES_PLL0 5
#define AVR32_SCIF_GC_USES_PLL1 6
#define AVR32_SCIF_GC_USES_RCOSC8 2
#define AVR32_SCIF_GC_USES_CLK_CPU 7 
#define AVR32_SCIF_GC_USES_CLK_HSB 8
#define AVR32_SCIF_GC_USES_CLK_PBA 9
#define AVR32_SCIF_GC_USES_CLK_PBB 10
#define AVR32_SCIF_GC_USES_CLK_PBC 11


//! The different clock source for the generic clocks
typedef enum
{
  SCIF_GCCTRL_SLOWCLOCK  = AVR32_SCIF_GC_USES_CLK_SLOW,
  SCIF_GCCTRL_OSC32K  = AVR32_SCIF_GC_USES_CLK_32,
  SCIF_GCCTRL_OSC0  = AVR32_SCIF_GC_USES_OSC0,
  SCIF_GCCTRL_OSC1  = AVR32_SCIF_GC_USES_OSC1,
  SCIF_GCCTRL_PLL0  = AVR32_SCIF_GC_USES_PLL0,
  SCIF_GCCTRL_PLL1  = AVR32_SCIF_GC_USES_PLL1,
  SCIF_GCCTRL_RC8M  = AVR32_SCIF_GC_USES_RCOSC8,
  SCIF_GCCTRL_CPUCLOCK  = AVR32_SCIF_GC_USES_CLK_CPU,
  SCIF_GCCTRL_HSBCLOCK  = AVR32_SCIF_GC_USES_CLK_HSB,
  SCIF_GCCTRL_PBACLOCK  = AVR32_SCIF_GC_USES_CLK_PBA,
  SCIF_GCCTRL_PBBCLOCK  = AVR32_SCIF_GC_USES_CLK_PBB,
  SCIF_GCCTRL_PBCCLOCK  = AVR32_SCIF_GC_USES_CLK_PBC,
  SCIF_GCCTRL_OSCSEL_INVALID
} scif_gcctrl_oscsel_t;



long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor);

long int scif_gc_enable(unsigned int gclk);

#endif