#include "gtest/gtest.h"

extern "C"
{
	#include "fff.h"
	#include "Fake_timers.h"
	#include "Fake_CANDriver.h"
	#include "Fake_CANObjectDictionary.h"
	#include "Fake_queue.h"
	#include "CANObjectDictionary.h"
	#include "CANOpen.h"
	#include "CAN_PDO.h"
	#include "CAN_PDO.c"
	#include "CAN_SDO.h"
	#include "CAN_SDO.c"
	#include "NMT.h"
	#include "NMT.c"
	#include "Fake_queue.h"
}

#define QUEUE_ITEM_SIZE 25
uint8_t commandBuffer[1000][QUEUE_ITEM_SIZE];
uint32_t commandIndex;


uint8_t outputBuffer[20][65000];
uint32_t outputCount = 0;

#define CAN_SET_TRANSMIT_SPACE_AVAILABLE() {CANHasTransmitSpaceAvailable_fake.return_val = 1;}
#define CONFIGURE_CORRECT_PDO_GET_PACKET() {CAN_SET_TRANSMIT_SPACE_AVAILABLE();						\
											ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	\
											receivePacket.id = 0x185;								\
											receivePacket.dataSize = 6;}							
#define CONFIGURE_CORRECT_PDO_SET_PACKET() {CAN_SET_TRANSMIT_SPACE_AVAILABLE();						\
											ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	\
											receivePacket.id = 0x184;								\
											receivePacket.dataSize = 6;}				

#define CONFIGURE_CORRECT_PDO_SETT_PACKET(address, value) { CAN_SET_TRANSMIT_SPACE_AVAILABLE();						\
															ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	\
															receivePacket.id = 0x190;								\
															receivePacket.dataSize = 6;								\
															receivePacket.data[0] = address;						\
															receivePacket.data[2] = value;}

#define CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET()	{  CAN_SET_TRANSMIT_SPACE_AVAILABLE();					\
													ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	\
													receivePacket.id = 0x672;								\
													receivePacket.dataSize = 8;								\
													receivePacket.data[0] = 0x40;							\
													receivePacket.data[1] = 0x0;							\
													receivePacket.data[2] = 0x20;							\
													receivePacket.data[3] = 0x0;}

#define CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET()	{  CAN_SET_TRANSMIT_SPACE_AVAILABLE();					\
													ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	\
													receivePacket.id = 0x672;								\
													receivePacket.dataSize = 8;								\
													receivePacket.data[0] = 0x70;							\
													if(toggleTest) receivePacket.data[0] |= 0x10;			\
													toggleTest = !toggleTest;}							

#define CONFIGURE_INITIALISE_SDO_ABORT_PACKET()	{  CAN_SET_TRANSMIT_SPACE_AVAILABLE();						\
													ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	\
													receivePacket.id = 0x672;								\
													receivePacket.dataSize = 8;								\
													receivePacket.data[0] = 0x80;							\
													receivePacket.data[1] = 0x0;							\
													receivePacket.data[2] = 0x20;							\
													receivePacket.data[3] = 0x0;}

#define CONFIGURE_HEARTBEAT_PACKET()			{  CAN_SET_TRANSMIT_SPACE_AVAILABLE();						\
													ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	\
													receivePacket.id = 0x701;								\
													receivePacket.dataSize = 1;								\
													receivePacket.data[0] = 0x05;}

#define RETURN_HOUSEKEEPING_DATA()	GetHousekeepingData_fake.custom_fake = GetHousekeepingData_customFake;



#define REGISTER_ADDRESS	0
#define SEQUENCE_NUMBER		1


#define CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER(X)	\
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;					\
	receivePacket.id = 0x1CC;												\
	receivePacket.dataSize = 6;												\
	receivePacket.data[4] = X;												\
	receivePacket.data[2] = 102;

#define CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(X, cobID, nodeID)	\
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;									\
	receivePacket.id = cobID;																\
	receivePacket.dataSize = 6;																\
	receivePacket.data[4] = X;																\
	receivePacket.data[2] = nodeID;

#define CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_MAXIMUM_BYTE_TRANSFER()	\
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;						\
	receivePacket.id = 0x1CC;													\
	receivePacket.dataSize = 6;													\
	receivePacket.data[4] = 0xFF;												\
	receivePacket.data[5] = 0xFF;												\
	receivePacket.data[2] = 102;

#define CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_MAXIMUM_CYCLE_BYTE_TRANSFER()		\
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;								\
	receivePacket.id = 0x1CC;															\
	receivePacket.dataSize = 6;															\
	receivePacket.data[4] = 0x0;														\
	receivePacket.data[5] = 0x2;														\
	receivePacket.data[2] = 102;

#define CONFIGURE_PAYLOAD_RESPONSE(COBID, packetDataSize, registerAddress, sequenceNumber, payloadData)	\
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;												\
	receivePacket.id = COBID;																			\
	receivePacket.dataSize = packetDataSize;															\
	receivePacket.data[0] = registerAddress;															\
	receivePacket.data[1] = sequenceNumber;																\
	receivePacket.data[3] = payloadData;

#define CONFIGURE_PAYLOAD_RESPONSE_FULL(COBID, packetDataSize, registerAddress, sequenceNumber, payloadData0, payloadData1, payloadData2, payloadData3)	\
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;																								\
	receivePacket.id = COBID;																															\
	receivePacket.dataSize = packetDataSize;																											\
	receivePacket.data[0] = registerAddress;																											\
	receivePacket.data[1] = sequenceNumber;																												\
	receivePacket.data[2] = payloadData0;																												\
	receivePacket.data[3] = payloadData1;																												\
	receivePacket.data[4] = payloadData2;																												\
	receivePacket.data[5] = payloadData3;

#define NO_PACKETS_RECEVIED()	receiveError = NO_PACKETS_RECEIVED;

#define CONFIGURE_QUEUE_RECIEVE_FAKE xQueueReceive_fake.custom_fake = xQueueReceiveFAKE;

#define CONFIGURE_MESSAGE_WAITING 		uxQueueMessagesWaiting_fake.return_val_seq = &returnSeq[0];	\
										uxQueueMessagesWaiting_fake.return_val_seq_len = 2;

DEFINE_FFF_GLOBALS;

/* Custom fakes */
CAN_ERROR ReceiveCAN_customFake(CAN_PACKET * z_packet);
CAN_PACKET receivePacket;
CAN_ERROR receiveError;
OBJECT_DICTIONARY_ERROR	GetCANObjectData_customFake(uint32_t z_index, uint32_t * z_data);
CAN_ERROR InitialiseCANDriver_customFake(uint16_t * z_receiveCODIDs, uint8_t z_numberOfReceiveCOBIDs);
CAN_ERROR ReceiveCAN_customFakeSinglePacket(CAN_PACKET * z_packet);
uint8_t GetHousekeepingData_customFake(uint8_t **);
static uint32_t xQueueSendFAKE(QueueHandle_t z_queue, const void * z_data, uint32_t z_ticks);

uint32_t odIndex;
uint32_t odData;
OBJECT_DICTIONARY_ERROR odReturn;
uint16_t COBIDs[20];
uint8_t COBID_Count;
uint32_t returnCount;
uint8_t housekeepingDataSize;
uint8_t housekeepingDataTest[255];
uint8_t toggleTest;

extern void (*p_CanUpdate)(void);
static uint32_t xQueueReceiveFAKE(QueueHandle_t z_handle, uint8_t * z_buffer, uint32_t z_ticks);
uint32_t returnSeq[2] = {1,0};

class CANOpen : public testing::Test
{
public:

	void SetUp()
	{
		RESET_FAKE(CANHasTransmitSpaceAvailable);
		RESET_FAKE(ReceiveCAN);
		RESET_FAKE(TransmitCAN);
		RESET_FAKE(GetCANObjectData);
		RESET_FAKE(SetCANObjectData);
		RESET_FAKE(InitialiseCANDriver);
		RESET_FAKE(TimerCreate);
		RESET_FAKE(TimerStart);
		RESET_FAKE(TimerStop);
		RESET_FAKE(TimerDelete);
		RESET_FAKE(TimerReset);
		RESET_FAKE(SettCANObjectData);
		RESET_FAKE(GetHousekeepingData);
		RESET_FAKE(ChangeCANChannel);
		RESET_FAKE(xQueueCreateStatic);
		RESET_FAKE(uxQueueMessagesWaiting);
		RESET_FAKE(xQueueReceive);
		RESET_FAKE(GetFieldType);
		RESET_FAKE(InitialiseCanObjectDictionary);
		RESET_FAKE(GetCANObjectDataRaw);
		RESET_FAKE(SetCANObjectDataRaw);
		RESET_FAKE(xQueueSend);

		for(uint32_t i = 0; i < 8; i++)receivePacket.data[i] = 0;
		receivePacket.dataSize = 0;
		receivePacket.id = 0;
		receivePacket.requestType = DATA_FRAME;
		receiveError = NO_ERROR_CAN;

		odIndex = 0;
		odData = 0;
		odReturn = NO_ERROR_OBJECT_DICTIONARY;

		GetCANObjectData_fake.return_val = NO_ERROR_OBJECT_DICTIONARY;
		returnCount = 0;

		housekeepingDataSize = 78;
		for(uint32_t i = 0; i < 255; i++) housekeepingDataTest[i] = i;
		RETURN_HOUSEKEEPING_DATA();
		toggleTest = 0;

		memset(commandBuffer, 0, sizeof(commandBuffer));
		commandIndex = 0;
		commandBuffer[0][0] = 1;

		memset(outputBuffer, 0, sizeof(outputBuffer));
		outputCount = 0;

		FFF_RESET_HISTORY();
	}

	virtual void TearDown() 
	{

	}
};


/***********************************************************/
/* Fakes												   */
/***********************************************************/
 static uint32_t xQueueReceiveFAKE(QueueHandle_t z_handle, uint8_t * z_buffer, uint32_t z_ticks)
 {
	 if(commandIndex < 1000)
	 {
		 for(uint32_t i = 0; i < QUEUE_ITEM_SIZE; i++)
		 {
			z_buffer[i] = commandBuffer[commandIndex][i];
		 }
		 commandIndex++;
	 }
	 return 1;
 }

 static uint32_t xQueueSendFAKE(QueueHandle_t z_queue, const void * z_data, uint32_t z_ticks)
{
	outputBuffer[0][outputCount] = ((uint8_t*)z_data)[0];
	outputBuffer[1][outputCount] = ((uint8_t*)z_data)[1];
	outputBuffer[2][outputCount] = ((uint8_t*)z_data)[2];
	outputBuffer[3][outputCount] = ((uint8_t*)z_data)[3];
	outputBuffer[4][outputCount] = ((uint8_t*)z_data)[4];
	outputBuffer[5][outputCount] = ((uint8_t*)z_data)[5];
	outputBuffer[6][outputCount] = ((uint8_t*)z_data)[6];
	outputCount++;
	return 1;
}

/***********************************************************/
/* Test InitialiseCANDriver								   */
/***********************************************************/
TEST_F(CANOpen, InitialiseCANOpen_CallsDriverInit)
{
	InitialiseCANOpen(0);
	EXPECT_EQ(1, InitialiseCANDriver_fake.call_count);
}

TEST_F(CANOpen, InitialiseCANOpen_CallsReturnsNOERRORWhenSuccessful)
{
	TimerCreate_fake.return_val = (void*)1;
	EXPECT_EQ(NO_ERROR_CAN_OPEN, InitialiseCANOpen(0));
}

TEST_F(CANOpen, InitialiseCANOpen_CallsReturnsERRORWhenDriverInitFails)
{
	InitialiseCANDriver_fake.return_val = INITIALISATION_FAILED;
	EXPECT_EQ(INITIALISATION_FAILED_CAN_OPEN, InitialiseCANOpen(0));
}

TEST_F(CANOpen, InitialiseCANOpen_CallsReturnsERRORWhenPDOInitFails)
{
	TimerCreate_fake.return_val = (xTimerHandle)0;
	EXPECT_EQ(INITIALISATION_FAILED_CAN_OPEN, InitialiseCANOpen(0));
}

TEST_F(CANOpen, InitialiseCANOpen_CallsDriverInitWithCorrectCOB_IDs)
{
	InitialiseCANDriver_fake.custom_fake = 	InitialiseCANDriver_customFake;
	InitialiseCANOpen(0);

	EXPECT_EQ(0x666, COBIDs[0]);
	EXPECT_EQ(0x672, COBIDs[1]);
	EXPECT_EQ(0x190, COBIDs[2]);
	EXPECT_EQ(0x184, COBIDs[3]);
	EXPECT_EQ(0x185, COBIDs[4]);
	EXPECT_EQ(0x1CC, COBIDs[5]);
	EXPECT_EQ(0x1CE, COBIDs[6]);
	EXPECT_EQ(0x1D0, COBIDs[7]);
	EXPECT_EQ(0x1D2, COBIDs[8]);
	EXPECT_EQ(0x1D6, COBIDs[9]);
	EXPECT_EQ(0x1DE, COBIDs[10]);
	EXPECT_EQ(0x701, COBIDs[11]);

	EXPECT_EQ(12, COBID_Count);
}

CAN_ERROR InitialiseCANDriver_customFake(uint16_t * z_receiveCODIDs, uint8_t z_numberOfReceiveCOBIDs)
{
	memcpy(COBIDs, z_receiveCODIDs, sizeof(COBIDs));
	COBID_Count = z_numberOfReceiveCOBIDs;
	return NO_ERROR_CAN;
}

TEST_F(CANOpen, InitialiseCANOpen_CallsxTimerCreate)
{
	InitialiseCANOpen(0);
	EXPECT_EQ(1, TimerCreate_fake.call_count);
}

TEST_F(CANOpen, InitialiseCANOpen_CallsxTimerCreateTwice)
{
	TimerCreate_fake.return_val = (void*)1;
	InitialiseCANOpen(0);
	EXPECT_EQ(2, TimerCreate_fake.call_count);
}

TEST_F(CANOpen, InitialiseCANOpen_DoesntInitialisePDOIfTheDriverInitialisationFails)
{
	InitialiseCANDriver_fake.return_val = INITIALISATION_FAILED;
	InitialiseCANOpen(0);
	EXPECT_EQ(0, TimerCreate_fake.call_count);
}

TEST_F(CANOpen, InitialiseCANOpen_PassesCorrectValuesIntoTimerCreate)
{
	InitialiseCANOpen(0);
	EXPECT_NE(0, (int)TimerCreate_fake.arg0_val);
	EXPECT_EQ(10,(int)TimerCreate_fake.arg1_val);
	EXPECT_EQ(0, (int)TimerCreate_fake.arg2_val);
	EXPECT_EQ(0, (int)TimerCreate_fake.arg3_val);
	EXPECT_NE(0, (int)TimerCreate_fake.arg4_val);
}

TEST_F(CANOpen, InitialiseCANOpen_PassesCorrectValuesIntoSecondTimerCreate)
{
	TimerCreate_fake.return_val = (void*)1;
	InitialiseCANOpen(0);
	EXPECT_NE(0, (int)TimerCreate_fake.arg0_val);
	EXPECT_EQ(1500,(int)TimerCreate_fake.arg1_val);
	EXPECT_EQ(0, (int)TimerCreate_fake.arg2_val);
	EXPECT_EQ(0, (int)TimerCreate_fake.arg3_val);
	EXPECT_NE(0, (int)TimerCreate_fake.arg4_val);
}

TEST_F(CANOpen, TimerStopIsCalledWhenWeResetTheTransferProcess)
{
	TimerCreate_fake.return_val = (void*)1;
	InitialiseCANOpen(0);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Switch channel to cause a reset.
	EXPECT_EQ(2, TimerStop_fake.call_count);
}

TEST_F(CANOpen, TimerStopIsCalledWithCorrectValues)
{
	TimerCreate_fake.return_val = (void*)1;
	InitialiseCANOpen(0);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Switch channel to cause a reset.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Switch channel to cause a reset.
	EXPECT_NE((void*)0, TimerStop_fake.arg0_val);
	EXPECT_EQ(20, TimerStop_fake.arg1_val);
}

TEST_F(CANOpen, CANOpenInitCallsCanObjectDictionaryInit)
{
	InitialiseCANOpen(0);
	EXPECT_EQ(1, InitialiseCanObjectDictionary_fake.call_count);
}


/***********************************************************/
/* Test CANOpenUpdate									   */
/***********************************************************/
TEST_F(CANOpen, CANOpenUpdate_DoesNotReadFromBufferIfWeDontHaveSpaceToReply)
{
	CANHasTransmitSpaceAvailable_fake.return_val = 0;
	p_CanUpdate();
	EXPECT_EQ(0, ReceiveCAN_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_ReadsFromBufferIfHaveSpaceToReply)
{
	CANHasTransmitSpaceAvailable_fake.return_val = 1;
	p_CanUpdate();
	EXPECT_EQ(1, ReceiveCAN_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_DoesNotReplyIfNoMessagesHaveBeenReceived)
{
	p_CanUpdate();
	EXPECT_EQ(0, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_OnlyRepliesToAcceptableCOB_IDs)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;

	for(uint32_t i = 0; i < 0xFFFF; i++)
	{
		receivePacket.id = i;
		for(uint32_t j = 0; j < 8; j++)
		{
			receivePacket.dataSize = j;
			p_CanUpdate();
		}

	}
	
	EXPECT_EQ(10, TransmitCAN_fake.call_count);
}

CAN_ERROR ReceiveCAN_customFake(CAN_PACKET * z_packet)
{
	z_packet->id = receivePacket.id;
	z_packet->dataSize = receivePacket.dataSize;
	z_packet->requestType = receivePacket.requestType;
	z_packet->data[0] = receivePacket.data[0];
	z_packet->data[1] = receivePacket.data[1];
	z_packet->data[2] = receivePacket.data[2];
	z_packet->data[3] = receivePacket.data[3];
	z_packet->data[4] = receivePacket.data[4];
	z_packet->data[5] = receivePacket.data[5];
	z_packet->data[6] = receivePacket.data[6];
	z_packet->data[7] = receivePacket.data[7];
	return receiveError;
}

/***********************************************************/
/* Test PDO_GET functionality							   */
/***********************************************************/
TEST_F(CANOpen, CANOpenUpdate_ReplysToCorrectPDOGetPacket)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;
	receivePacket.id = 0x185;
	receivePacket.dataSize = 6;
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_DoesntReplyToIncorrectPDOGetPacket)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;
	receivePacket.id = 0x185;
	receivePacket.dataSize = 6;
	GetCANObjectData_fake.return_val = WRONG_ACCESS_RIGHTS;
	p_CanUpdate();
	EXPECT_EQ(0, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_GET_ACKsWithCorrectSequenceNumber)
{
	CONFIGURE_CORRECT_PDO_GET_PACKET();
	receivePacket.data[1] = 100;
	p_CanUpdate();
	EXPECT_EQ(100, TransmitCAN_fake.arg0_val.data[1]);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_GET_ACKsWithMirroredAddress)
{
	CONFIGURE_CORRECT_PDO_GET_PACKET();
	receivePacket.data[0] = 0xAA;
	p_CanUpdate();
	EXPECT_EQ(0xAA, TransmitCAN_fake.arg0_val.data[0]);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_GETCallsProcessDataObjectGET)
{
	CONFIGURE_CORRECT_PDO_GET_PACKET();
	p_CanUpdate();
	EXPECT_EQ(1, GetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_GETCallsGetData)
{
	CONFIGURE_CORRECT_PDO_GET_PACKET();
	p_CanUpdate();
	EXPECT_EQ(1, GetCANObjectData_fake.call_count);
}

OBJECT_DICTIONARY_ERROR	GetCANObjectData_customFake(uint32_t z_index, uint32_t * z_data)
{
	odIndex = z_index;
	*z_data = odData;
	return odReturn;
}

TEST_F(CANOpen, CANOpenUpdate_PDO_GETCallsGetCANObjectDataWithCorrectIndex)
{
	CONFIGURE_CORRECT_PDO_GET_PACKET();
	GetCANObjectData_fake.custom_fake = GetCANObjectData_customFake;

	for(uint32_t i = 0; i < 0xFF; i++)
	{
		receivePacket.data[0] = i;
		p_CanUpdate();
		EXPECT_EQ(i, odIndex);
	}
}

TEST_F(CANOpen, CANOpenUpdate_PDO_GETReturnsCorrectData)
{
	CONFIGURE_CORRECT_PDO_GET_PACKET();
	GetCANObjectData_fake.custom_fake = GetCANObjectData_customFake;
	odData = 0xFAFAAFAF;
	p_CanUpdate();
	EXPECT_EQ(0xAF, TransmitCAN_fake.arg0_val.data[2]);
	EXPECT_EQ(0xAF, TransmitCAN_fake.arg0_val.data[3]);
	EXPECT_EQ(0xFA, TransmitCAN_fake.arg0_val.data[4]);
	EXPECT_EQ(0xFA, TransmitCAN_fake.arg0_val.data[5]);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_GETReturnsCorrectPacketSize)
{
	CONFIGURE_CORRECT_PDO_GET_PACKET();
	GetCANObjectData_fake.custom_fake = GetCANObjectData_customFake;
	p_CanUpdate();
	EXPECT_EQ(6, TransmitCAN_fake.arg0_val.dataSize);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_GET_ACKsWithCorrectConnectionObjectID)
{
	CONFIGURE_CORRECT_PDO_GET_PACKET();
	GetCANObjectData_fake.custom_fake = GetCANObjectData_customFake;
	p_CanUpdate();
	EXPECT_EQ(0x186, TransmitCAN_fake.arg0_val.id);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_GET_ReplysWithCorrectFrameFormat)
{
	CONFIGURE_CORRECT_PDO_GET_PACKET();
	GetCANObjectData_fake.custom_fake = GetCANObjectData_customFake;
	p_CanUpdate();
	EXPECT_EQ(DATA_FRAME, TransmitCAN_fake.arg0_val.requestType);
}

/***********************************************************/
/* Test PDO_SET functionality							   */
/***********************************************************/
TEST_F(CANOpen, CANOpenUpdate_ReplysToCorrectPDOSetPacket)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;
	receivePacket.id = 0x184;
	receivePacket.dataSize = 6;
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SET_ACKsWithCorrectSequenceNumber)
{
	CONFIGURE_CORRECT_PDO_SET_PACKET();
	receivePacket.data[1] = 100;
	p_CanUpdate();
	EXPECT_EQ(100, TransmitCAN_fake.arg0_val.data[1]);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SET_ACKsWithMirroredAddress)
{
	CONFIGURE_CORRECT_PDO_SET_PACKET();
	receivePacket.data[0] = 0xAA;
	p_CanUpdate();
	EXPECT_EQ(0xAA, TransmitCAN_fake.arg0_val.data[0]);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SETCallsSETData)
{
	CONFIGURE_CORRECT_PDO_SET_PACKET();
	p_CanUpdate();
	EXPECT_EQ(1, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SETCallsGetCANObjectDataWithCorrectIndex)
{
	CONFIGURE_CORRECT_PDO_SET_PACKET();

	for(uint32_t i = 0; i < 0xFF; i++)
	{
		receivePacket.data[0] = i;
		p_CanUpdate();
		EXPECT_EQ(i, SetCANObjectData_fake.arg0_val);
	}
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SETPassesCorrectDataTo_SetCANObjectData)
{
	CONFIGURE_CORRECT_PDO_SET_PACKET();
	receivePacket.data[2] = 0xFF;
	receivePacket.data[3] = 0xAA;
	receivePacket.data[4] = 0xFF;
	receivePacket.data[5] = 0xAA;
	p_CanUpdate();
	EXPECT_EQ(0xAAFFAAFF, SetCANObjectData_fake.arg1_val);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SETReturnsCorrectPacketSize)
{
	CONFIGURE_CORRECT_PDO_SET_PACKET();
	p_CanUpdate();
	EXPECT_EQ(6, TransmitCAN_fake.arg0_val.dataSize);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SET_ACKsWithCorrectConnectionObjectID)
{
	CONFIGURE_CORRECT_PDO_SET_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x186, TransmitCAN_fake.arg0_val.id);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SET_ReplysWithCorrectFrameFormat)
{
	CONFIGURE_CORRECT_PDO_SET_PACKET();
	p_CanUpdate();
	EXPECT_EQ(DATA_FRAME, TransmitCAN_fake.arg0_val.requestType);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SET_ACKsWithMirroredDataFields)
{
	CONFIGURE_CORRECT_PDO_SET_PACKET();
	receivePacket.data[2] = 0xFF;
	receivePacket.data[3] = 0xAA;
	receivePacket.data[4] = 0xFF;
	receivePacket.data[5] = 0xAA;
	p_CanUpdate();
	EXPECT_EQ(0xFF, TransmitCAN_fake.arg0_val.data[2]);
	EXPECT_EQ(0xAA, TransmitCAN_fake.arg0_val.data[3]);
	EXPECT_EQ(0xFF, TransmitCAN_fake.arg0_val.data[4]);
	EXPECT_EQ(0xAA, TransmitCAN_fake.arg0_val.data[5]);
}


/***********************************************************/
/* Test PDO file transfer protocol						   */
/***********************************************************/
TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_ReturnsOKWhenSuccessful)
{
	EXPECT_EQ(NO_ERROR_OBJECT_DICTIONARY, ReceivedPayloadDataTransferProtocolRequest(0, 0, 0));
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_Transmits)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00FF0000, 0);
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_BeginsATimeOut)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	TimerCreate_fake.return_val = (void*)1;
	InitialiseCANOpen(0);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00FF0000, 0);
	p_CanUpdate();
	EXPECT_EQ(2, TimerReset_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToPCAM)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToLMP)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00020000, 0);
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToGPS)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00040000, 0);
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToOBD)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00080000, 0);
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToSCAM)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_DoesntRespondOutsideOfDeviceMask)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00400000, 0);
	p_CanUpdate();
	EXPECT_EQ(0, TransmitCAN_fake.call_count);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00008000, 0);
	p_CanUpdate();
	EXPECT_EQ(0, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TransmitsToCorrectCOBID_PCAM)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	EXPECT_EQ(0x1CB, TransmitCAN_fake.arg0_val.id);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TransmitsToCorrectCOBID_LMP)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00020000, 0);
	p_CanUpdate();
	EXPECT_EQ(0x1CF, TransmitCAN_fake.arg0_val.id);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TransmitsToCorrectCOBID_TRI)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00040000, 0);
	p_CanUpdate();
	EXPECT_EQ(0x1CD, TransmitCAN_fake.arg0_val.id);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TransmitsToCorrectCOBID_GPS)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00080000, 0);
	p_CanUpdate();
	EXPECT_EQ(0x1D1, TransmitCAN_fake.arg0_val.id);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TransmitsToCorrectCOBID_OBDH)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);
	p_CanUpdate();
	EXPECT_EQ(0x1D5, TransmitCAN_fake.arg0_val.id);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TransmitsToCorrectCOBID_SCAM)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	p_CanUpdate();
	EXPECT_EQ(0x1DC, TransmitCAN_fake.arg0_val.id);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TransmitsWithInitiallyZeroSequenceNumber)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	EXPECT_EQ(0x0, TransmitCAN_fake.arg0_val.data[1]);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TransmitsWithCorrectConfigurationRegisterAddress)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	EXPECT_EQ(0x0, TransmitCAN_fake.arg0_val.data[0]);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TransmitsWithCorrectDataSize)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	EXPECT_EQ(6, TransmitCAN_fake.arg0_val.dataSize);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToPCAMButDoesNotSendGETP)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToPCAMAndSendsGETP)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	
	receivePacket.id = 0x1CC;								
	receivePacket.dataSize = 6;
	receivePacket.data[4] = 1;
	receivePacket.data[2] = 102;
	p_CanUpdate();
	EXPECT_EQ(2, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToPCAMAndSendsGETPWithTimeoutEnabled)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	TimerCreate_fake.return_val = (void*)1;
	InitialiseCANOpen(0);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	
	receivePacket.id = 0x1CC;								
	receivePacket.dataSize = 6;
	receivePacket.data[4] = 1;
	receivePacket.data[2] = 102;
	p_CanUpdate();
	EXPECT_EQ(3, TimerReset_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_IgnoresIncorrectCOBID)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	
	receivePacket.id = 0x1CE;								
	receivePacket.dataSize = 6;							
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TeminatesTransferForIncorrectDataSize)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	
	receivePacket.id = 0x1CC;								
	receivePacket.dataSize = 5;							
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TeminatesTransferForIncorrectAddress)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	
	receivePacket.id = 0x1CC;
	receivePacket.data[0] = 0x01;
	receivePacket.dataSize = 6;							
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TeminatesTransferForIncorrectNodeID)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFake;	
	receivePacket.id = 0x1CC;
	receivePacket.data[0] = 0x01;
	receivePacket.dataSize = 6;							
	receivePacket.data[2] = 0xFF;
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToPCAMAndSendsGETPWithCorrectlyFormattedRequest)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER(1);
	p_CanUpdate();
	EXPECT_EQ(6, TransmitCAN_fake.arg0_val.dataSize);
	EXPECT_EQ(0x1CB, TransmitCAN_fake.arg0_val.id);
	EXPECT_EQ(0x1, TransmitCAN_fake.arg0_val.data[REGISTER_ADDRESS]);
	EXPECT_EQ(1, TransmitCAN_fake.arg0_val.data[SEQUENCE_NUMBER]);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_DoesntCompleteUntilTheCorrectPakcetIsReceived)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER(1);
	p_CanUpdate();
	EXPECT_EQ(0x1, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CompletesOnePacketTransferWhenCorrectPakcetIsReceived)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER(1);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 1, 0, 10);
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_DoesntCompleteUntilTheCorrectPacketsAreReceived)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER(2);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 1, 1, 10);
	p_CanUpdate();
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	p_CanUpdate();
	EXPECT_EQ(0x1, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RespondsToPCAMAndSendsTwoGETPCommands)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER(2);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 1, 1, 10);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 2, 2, 10);
	p_CanUpdate();
	EXPECT_EQ(3, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_SecondGETPCommandContainsCorrectData)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER(2);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 1, 1, 10);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 1, 2, 10);
	p_CanUpdate();

	EXPECT_EQ(6, TransmitCAN_fake.arg0_val.dataSize);
	EXPECT_EQ(0x1CB, TransmitCAN_fake.arg0_val.id);
	EXPECT_EQ(0x2, TransmitCAN_fake.arg0_val.data[REGISTER_ADDRESS]);
	EXPECT_EQ(2, TransmitCAN_fake.arg0_val.data[SEQUENCE_NUMBER]);
}


TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CompletesTwoPacketTransferWhenCorrectPacketsAreReceived)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER(2);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 1, 1, 10);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 1, 2, 10);
	EXPECT_EQ(0x1, PayloadDataTransferIsInProgess());
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_Completes512PacketTransferWhenCorrectPacketsAreReceived)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_MAXIMUM_CYCLE_BYTE_TRANSFER();
	p_CanUpdate();
	uint8_t registerAddress = 1;

	for(uint32_t i = 0; i < 512; i++)
	{
		EXPECT_EQ(0x1, PayloadDataTransferIsInProgess());
		CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, registerAddress, i + 1, 10);
		p_CanUpdate();
		registerAddress = registerAddress == 2 ? 1 : 2;
	}
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_RerequestsPacketsWhenOBDHSendsBeginTransfer)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER(10);
	p_CanUpdate();
	EXPECT_EQ(2, TransmitCAN_fake.call_count);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 0x01, 1, 10);
	p_CanUpdate();
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(6, TransmitCAN_fake.arg0_val.dataSize);
	EXPECT_EQ(0x1CB, TransmitCAN_fake.arg0_val.id);
	EXPECT_EQ(0x0, TransmitCAN_fake.arg0_val.data[REGISTER_ADDRESS]);
	EXPECT_EQ(2, TransmitCAN_fake.arg0_val.data[SEQUENCE_NUMBER]);
	EXPECT_EQ(3, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_OnlyRequests512PacketsPerOBDHRequest)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_MAXIMUM_BYTE_TRANSFER();
	p_CanUpdate();
	uint8_t registerAddress = 1;

	for(uint32_t i = 0; i < 65535; i++)
	{
		CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, registerAddress, i + 1, 10);
		p_CanUpdate();
		registerAddress = registerAddress == 2 ? 1 : 2;
	}
	EXPECT_EQ(513, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_MaximumSizeTransferIn333ByteChunks)
{
	uint8_t requestCount = 0;
	uint16_t packetsRemaining = 65535;
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_MAXIMUM_BYTE_TRANSFER();
	p_CanUpdate();
	uint8_t registerAddress = 1;

	for(uint32_t i = 0; i < 80000; i++)
	{
		if((i % 333) == 0 && i != 0)
		{
			ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
		}

		CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, registerAddress, i + 1 + requestCount, 10);
		p_CanUpdate();
		registerAddress = registerAddress == 2 ? 1 : 2;
		packetsRemaining--;

		if((i % 333) == 0 && i != 0)
		{
			requestCount++;
			p_CanUpdate();
			receivePacket.id = 0x1CC;								
			receivePacket.dataSize = 6;
			receivePacket.data[2] = 102;		//node id.
			receivePacket.data[0] = 0;		//data transfer register.
			memcpy(&receivePacket.data[4], &packetsRemaining, sizeof(uint16_t));
			p_CanUpdate();
		}

		if(!PayloadDataTransferIsInProgess())
		{
			break;
		}
	}
	EXPECT_EQ((65536+requestCount), TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TimeOutCausesTransferStopWhenInitialising)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceiveCAN_fake.return_val = NO_ERROR_CAN;
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	EXPECT_EQ(0x1, PayloadDataTransferIsInProgess());
	p_CanUpdate();
	TimerExpiredCallback((xTimerHandle)1);
	p_CanUpdate();
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_TimeOutCausesTransferStopDuringTransfer)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceiveCAN_fake.return_val = NO_ERROR_CAN;
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	ReceiveCAN_fake.custom_fake = ReceiveCAN_customFakeSinglePacket;	
	receivePacket.id = 0x1CC;								
	receivePacket.dataSize = 6;
	receivePacket.data[4] = 1;
	receivePacket.data[2] = 102;
	p_CanUpdate();
	EXPECT_EQ(0x1, PayloadDataTransferIsInProgess());
	p_CanUpdate();
	TimerExpiredCallback((xTimerHandle)1);
	p_CanUpdate();
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

CAN_ERROR ReceiveCAN_customFakeSinglePacket(CAN_PACKET * z_packet)
{
	if(returnCount == 0)
	{
		z_packet->id = receivePacket.id;
		z_packet->dataSize = receivePacket.dataSize;
		z_packet->requestType = receivePacket.requestType;
		z_packet->data[0] = receivePacket.data[0];
		z_packet->data[1] = receivePacket.data[1];
		z_packet->data[2] = receivePacket.data[2];
		z_packet->data[3] = receivePacket.data[3];
		z_packet->data[4] = receivePacket.data[4];
		z_packet->data[5] = receivePacket.data[5];
		z_packet->data[6] = receivePacket.data[6];
		z_packet->data[7] = receivePacket.data[7];
		returnCount++;
		return NO_ERROR_CAN;
	}
	return NO_PACKETS_RECEIVED;
}

/* Transfer a single packet for all payloads here. */
TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CompletesOnePacketTransferFor_PCAM_Payload)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1CC, 103);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CC, 6, 1, 1, 10);
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CompletesOnePacketTransferFor_TRI_Payload)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00040000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1CE, 104);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1CE, 6, 1, 1, 10);
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CompletesOnePacketTransferFor_LMD_Payload)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00020000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1D0, 105);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1D0, 6, 1, 1, 10);
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CompletesOnePacketTransferFor_GPS_Payload)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00080000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1D2, 106);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1D2, 6, 1, 1, 10);
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CompletesOnePacketTransferFor_OBDH_Payload)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00100000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1D6, 1);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1D6, 6, 1, 1, 10);
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CompletesOnePacketTransferFor_SCAM_Payload)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1DE, 107);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1DE, 6, 1, 1, 10);
	p_CanUpdate();
	EXPECT_EQ(0x0, PayloadDataTransferIsInProgess());
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_PlacesInitialisationPacketOntoTheQueue)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(1);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	RESET_FAKE(xQueueSend);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	p_CanUpdate();
	EXPECT_EQ(1, xQueueSend_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_DoesntPlaceInitialisationPacketOntoTheQueueIfWeDontHaveAValidQueue)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(0);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	RESET_FAKE(xQueueSend);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	p_CanUpdate();
	EXPECT_EQ(0, xQueueSend_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_SendsAPayloadFlashInitialisationPacket)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(1);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	RESET_FAKE(xQueueSend);
	xQueueSend_fake.custom_fake = &xQueueSendFAKE;
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	EXPECT_EQ(0 , outputBuffer[0][0]);
	EXPECT_EQ(1 , outputBuffer[1][0]);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CorrectHandleIsPassedIntoQueue)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(0xAA);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	RESET_FAKE(xQueueSend);
	xQueueSend_fake.custom_fake = &xQueueSendFAKE;
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	EXPECT_EQ(0xAA , xQueueSend_fake.arg0_history[0]);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_CorrectTicksToWaitIsPassedIntoQueue)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(0xAA);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	RESET_FAKE(xQueueSend);
	xQueueSend_fake.custom_fake = &xQueueSendFAKE;
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	EXPECT_EQ(2 , xQueueSend_fake.arg2_history[0]);
}


TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_AddsStopPacketToQueue)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(1);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1DE, 107);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1DE, 6, 1, 1, 10);
	RESET_FAKE(xQueueSend);
	p_CanUpdate();
	EXPECT_EQ(2, xQueueSend_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_DoesntAddStopPacketToQueueIfHandleInvalid)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(0);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1DE, 107);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1DE, 6, 1, 1, 10);
	p_CanUpdate();
	EXPECT_EQ(0, xQueueSend_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_SendsCorrectStopPacket)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(1);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1DE, 107);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1DE, 6, 1, 1, 10);
	outputBuffer[0][1] = 4;
	outputBuffer[1][1] = 4;
	RESET_FAKE(xQueueSend);
	xQueueSend_fake.custom_fake = &xQueueSendFAKE;
	p_CanUpdate();
	EXPECT_EQ(0, outputBuffer[0][1]);
	EXPECT_EQ(0, outputBuffer[1][1]);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_SendsDataPacketToQueue)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(1);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	RESET_FAKE(xQueueSend);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1DE, 107);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE(0x1DE, 6, 1, 1, 10);
	p_CanUpdate();

	EXPECT_EQ(3, xQueueSend_fake.call_count);
}

TEST_F(CANOpen, ReceivedPayloadDataTransferProtocolRequest_SendsCorrectDataPacket)
{
	CAN_SET_TRANSMIT_SPACE_AVAILABLE();
	InitialiseCANOpen(1);
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00010000, 0);	// Reset first by switching channel.
	RESET_FAKE(xQueueSend);
	xQueueSend_fake.custom_fake = &xQueueSendFAKE;
	ReceivedPayloadDataTransferProtocolRequest(0, 0x00200000, 0);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_INITIAL_RESPONSE_PACKET_FOR_X_BYTE_TRANSFER_WIT_COBID(1, 0x1DE, 107);
	p_CanUpdate();
	CONFIGURE_PAYLOAD_RESPONSE_FULL(0x1DE, 6, 1, 1, 0xAA, 0xBB, 0xAA, 0xBB);
	p_CanUpdate();

	EXPECT_EQ(1, outputBuffer[0][1]);
	EXPECT_EQ(0xAA, outputBuffer[1][1]);
	EXPECT_EQ(0xBB, outputBuffer[2][1]);
	EXPECT_EQ(0xAA, outputBuffer[3][1]);
	EXPECT_EQ(0xBB, outputBuffer[4][1]);
}

/**********************************************************************/
/* Test the SET time command functionality							  */
/**********************************************************************/
TEST_F(CANOpen, CANOpenUpdate_PDO_SETTCallsSETTData)
{
	CONFIGURE_CORRECT_PDO_SETT_PACKET(0x01, 0x01);
	p_CanUpdate();
	EXPECT_EQ(1, SettCANObjectData_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SETTDoesNotCallSETTDataIfPacketSizeIsWrong)
{
	CONFIGURE_CORRECT_PDO_SETT_PACKET(0x01, 0x01);
	receivePacket.dataSize = 5;
	p_CanUpdate();
	EXPECT_EQ(0, SettCANObjectData_fake.call_count);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SETCallsSettCANObjectDataWithCorrectIndex)
{
	CONFIGURE_CORRECT_PDO_SETT_PACKET(0x01, 0xAB);
	p_CanUpdate();
	EXPECT_EQ(0x01, SettCANObjectData_fake.arg0_val);
}

TEST_F(CANOpen, CANOpenUpdate_PDO_SETCallsSettCANObjectDataWithCorrectData)
{
	CONFIGURE_CORRECT_PDO_SETT_PACKET(0x01, 0xAB);
	p_CanUpdate();
	EXPECT_EQ(0xAB, SettCANObjectData_fake.arg1_val);
}

/**********************************************************************/
/* Test the SDO transfer for housekeeping data.						  */
/**********************************************************************/
TEST_F(CANOpen, SDO_CallsGetHousekeepingDataIfUploadInitialiseIsStarted)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	EXPECT_EQ(1, GetHousekeepingData_fake.call_count);
}

TEST_F(CANOpen, SDO_DoesNotCallGetHousekeepingDataIfAbortPacketReceived)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_ABORT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0, GetHousekeepingData_fake.call_count);
}

TEST_F(CANOpen, SDO_CallsGetHousekeepingDataWithValuePointer)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	EXPECT_NE(0, (int)GetHousekeepingData_fake.arg0_val);
}

TEST_F(CANOpen, SDO_SendsAbortIfWeAreIdleAndReceiveASegmentRequest)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, SDO_TestAbortPacketContents)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(8, TransmitCAN_fake.arg0_val.dataSize);
	EXPECT_EQ(0x5F2, TransmitCAN_fake.arg0_val.id);
	EXPECT_EQ(0x80, TransmitCAN_fake.arg0_val.data[0]);
	EXPECT_EQ(0, TransmitCAN_fake.arg0_val.data[1]);
	EXPECT_EQ(0x20, TransmitCAN_fake.arg0_val.data[2]);
	EXPECT_EQ(0, TransmitCAN_fake.arg0_val.data[3]);
}

TEST_F(CANOpen, SDO_SendsAcknowledgeIfInitialisePacketIsValid)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
}

TEST_F(CANOpen, SDO_TestAcceptPacketContents)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	EXPECT_EQ(8, TransmitCAN_fake.arg0_val.dataSize);
	EXPECT_EQ(0x5F2, TransmitCAN_fake.arg0_val.id);
	EXPECT_EQ(0x40, TransmitCAN_fake.arg0_val.data[0]);
	EXPECT_EQ(0, TransmitCAN_fake.arg0_val.data[1]);
	EXPECT_EQ(0x20, TransmitCAN_fake.arg0_val.data[2]);
	EXPECT_EQ(0, TransmitCAN_fake.arg0_val.data[3]);
}

TEST_F(CANOpen, SDO_TwoInitialisePacketsCausesError)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	EXPECT_EQ(2, TransmitCAN_fake.call_count);
	EXPECT_EQ(SDO_IDLE, GetTransferState());
}

TEST_F(CANOpen, SDO_InitialisePacketFollowedByAbortCausesAbortButNoResponse)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_ABORT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(1, TransmitCAN_fake.call_count);
	EXPECT_EQ(SDO_IDLE, GetTransferState());
}

TEST_F(CANOpen, SDO_InitialisePacketFollowedByTransferPacketCausesCorrectResponse)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(2, TransmitCAN_fake.call_count);
	EXPECT_EQ(SDO_ACTIVE, GetTransferState());
}

TEST_F(CANOpen, SDO_SegmentPacketContainsCorrectHousekeepingData)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(8, TransmitCAN_fake.arg0_val.dataSize);
	EXPECT_EQ(0x5F2, TransmitCAN_fake.arg0_val.id);
	EXPECT_EQ(0, TransmitCAN_fake.arg0_val.data[0]);
	EXPECT_EQ(0, TransmitCAN_fake.arg0_val.data[1]);
	EXPECT_EQ(1, TransmitCAN_fake.arg0_val.data[2]);
	EXPECT_EQ(2, TransmitCAN_fake.arg0_val.data[3]);
	EXPECT_EQ(3, TransmitCAN_fake.arg0_val.data[4]);
	EXPECT_EQ(4, TransmitCAN_fake.arg0_val.data[5]);
	EXPECT_EQ(5, TransmitCAN_fake.arg0_val.data[6]);
	EXPECT_EQ(6, TransmitCAN_fake.arg0_val.data[7]);
}

TEST_F(CANOpen, SDO_TransmitsAllExpectedData)
{
	housekeepingDataSize = 78;
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(8, TransmitCAN_fake.arg0_val.dataSize);
	EXPECT_EQ(0x1D, TransmitCAN_fake.arg0_val.data[0]);
	EXPECT_EQ(77, TransmitCAN_fake.arg0_val.data[1]);
	EXPECT_EQ(SDO_IDLE, GetTransferState());
}

TEST_F(CANOpen, SDO_ToggleBitIsCorrect)
{
	housekeepingDataSize = 78;
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	p_CanUpdate();
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x00, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x10, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x00, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x10, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x00, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x10, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x00, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x10, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x00, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x10, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x00, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
	CONFIGURE_INITIALISE_SDO_SEGMENT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(0x10, (TransmitCAN_fake.arg0_val.data[0] & 0x10));
}

TEST_F(CANOpen, SDO_IncorrectAddressStopsInitialisation)
{
	InitialiseServiceDataObject();
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	receivePacket.data[2] = 0x21;
	p_CanUpdate();
	EXPECT_EQ(0, TransmitCAN_fake.call_count);
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	receivePacket.data[1] = 0x01;
	p_CanUpdate();
	EXPECT_EQ(0, TransmitCAN_fake.call_count);
	CONFIGURE_INITIALISE_SDO_TRANSFER_PACKET();
	receivePacket.data[3] = 0x01;
	p_CanUpdate();
	EXPECT_EQ(0, TransmitCAN_fake.call_count);
}

uint8_t GetHousekeepingData_customFake(uint8_t ** z_data)
{
	*z_data = housekeepingDataTest;
	return housekeepingDataSize;
}
/**********************************************************************/
/* Test the NMT functionality										  */
/**********************************************************************/
TEST_F(CANOpen, NMT_CallsResetTimerWhenATimeOutOccurs)
{
	HeartBeatConsumerTimeout(heartbeatConsumerTimer);
	p_CanUpdate();
	EXPECT_EQ(1, TimerReset_fake.call_count);
}

TEST_F(CANOpen, NMT_CallsResetTimerWithCorrectArgumentsWhenATimeOutOccurs)
{
	HeartBeatConsumerTimeout(heartbeatConsumerTimer);
	p_CanUpdate();
	EXPECT_EQ(heartbeatConsumerTimer, TimerReset_fake.arg0_val);
	EXPECT_EQ(20, TimerReset_fake.arg1_val);
}

TEST_F(CANOpen, NMT_CallsChangeCanChannelAfter20MissedHeartBeats)
{
	for(uint8_t i = 0; i < 20; i++)
	{
		HeartBeatConsumerTimeout(heartbeatConsumerTimer);
		p_CanUpdate();
	}
	EXPECT_EQ(1, ChangeCANChannel_fake.call_count);
}

TEST_F(CANOpen, NMT_CallsChangeCanChannelAfterEvery20MissedHeartBeats)
{
	for(uint8_t j = 0; j < 250; j++)
	{
		for(uint8_t i = 0; i < 20; i++)
		{
			HeartBeatConsumerTimeout(heartbeatConsumerTimer);
			p_CanUpdate();
		}
		EXPECT_EQ(j+1, ChangeCANChannel_fake.call_count);
	}
}

TEST_F(CANOpen, NMT_DoesNotCallChangeCanChannelIfHeartBeatPacketIsReceived)
{
	CONFIGURE_HEARTBEAT_PACKET();

	for(uint8_t j = 0; j < 250; j++)
	{
		for(uint8_t i = 0; i < 18; i++)
		{
			HeartBeatConsumerTimeout(heartbeatConsumerTimer);
			p_CanUpdate();
		}
		EXPECT_EQ(0, ChangeCANChannel_fake.call_count);
	}
}

TEST_F(CANOpen, NMT_CallsResetTimerWhenHeartbeatPacketReceived)
{
	CONFIGURE_HEARTBEAT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(1, TimerReset_fake.call_count);
}

TEST_F(CANOpen, NMT_CallsResetTimerWithCorrectArgumentsWhenHeartbeatPacketReceived)
{
	CONFIGURE_HEARTBEAT_PACKET();
	p_CanUpdate();
	EXPECT_EQ(heartbeatConsumerTimer, TimerReset_fake.arg0_val);
	EXPECT_EQ(20, TimerReset_fake.arg1_val);
}

TEST_F(CANOpen, NMT_ChangesIntoSwitchingStateWhenHeartbeatMissedFor20Cycles)
{
	TimerCreate_fake.return_val = (void*)1;
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	EXPECT_EQ(CAN_BUS_INACTIVE, GetNetworkState());
	for(uint8_t i = 0; i < 20; i++)
	{
		EXPECT_EQ(CAN_BUS_INACTIVE, GetNetworkState());
		HeartBeatConsumerTimeout(heartbeatConsumerTimer);
		p_CanUpdate();
	}
	EXPECT_EQ(CAN_BUS_SWITCHING, GetNetworkState());
}

/**********************************************************************/
/* Test the command queue											  */
/**********************************************************************/
TEST_F(CANOpen, CommandQueueCallsQueueReceiveIfItemsPresent)
{
	xQueueCreateStatic_fake.return_val = 1;
	CONFIGURE_MESSAGE_WAITING;
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_NE(0, xQueueReceive_fake.call_count);
}

TEST_F(CANOpen, CommandQueueDoesNotCallsQueueReceiveIfNoItemsArePresent)
{
	xQueueCreateStatic_fake.return_val = 1;
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0, xQueueReceive_fake.call_count);
}

TEST_F(CANOpen, ValidCommandUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 5;		// Data length
	commandBuffer[0][2] = 0x10;		// The RF mode.
	commandBuffer[0][3] = 0x01;		// Configure the mode.
	commandBuffer[0][4] = 0x0;
	commandBuffer[0][5] = 0x0;
	commandBuffer[0][6] = 0x0;
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0x10, SetCANObjectData_fake.arg0_val);
	EXPECT_EQ(0x01, SetCANObjectData_fake.arg1_val);
}

TEST_F(CANOpen, OnLimitOfMaximumRegularPacketSizeUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 5;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_NE(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OneBelowLimitOfMaximumRegularPacketSizeUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 4;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_NE(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OneAboveLimitOfMaximumRegularPacketSizeDoesNotUpdateTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 6;		// Data length above limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OnLimitOfMaximumFittertSizeUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = FITTER_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 21;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_NE(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OneBelowLimitOfMaximumFitterSizeUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = FITTER_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 20;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_NE(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OneAboveLimitOfMaximumFitterSizeDoesNotUpdateTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = FITTER_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 22;		// Data length above limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OnLimitOfMaximumHolemaptSizeUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = HOLEMAP_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 21;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_NE(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OneBelowLimitOfMaximumHolemapSizeUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = HOLEMAP_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 20;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_NE(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OneAboveLimitOfMaximumHolemapSizeDoesNotUpdateTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = HOLEMAP_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 22;		// Data length above limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OnLimitOfMaximumDebugSizeUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = DEBUG_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 21;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_NE(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OneBelowLimitOfMaximumDebugSizeUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = DEBUG_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 20;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_NE(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, OneAboveLimitOfMaximumDebugSizeDoesNotUpdateTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = DEBUG_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 22;		// Data length above limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, FitterMessageCallsTheODForAllDataPresent)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = FITTER_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 21;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(5, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, AllFitterMessageDataIsPassedIntoTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = FITTER_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 21;		// Data length at limit
	commandBuffer[0][19] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][20] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][21] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][22] = 0xFF;	// Should end put into OD 20th.
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0xFFFFFFFF, SetCANObjectData_fake.arg1_history[4]);
}

TEST_F(CANOpen, HolemapMessageCallsTheODForAllDataPresent)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = HOLEMAP_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 21;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(5, SetCANObjectData_fake.call_count);
}

TEST_F(CANOpen, AllHolemapMessageDataIsPassedIntoTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = HOLEMAP_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][1] = 21;		// Data length at limit
	commandBuffer[0][19] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][20] = 0xAA;	// Should end put into OD 20th.
	commandBuffer[0][21] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][22] = 0xAA;	// Should end put into OD 20th.
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0xAAFFAAFF, SetCANObjectData_fake.arg1_history[4]);
}

/**********************************************************************/
/* Test the command queue for locally generated packets.			  */
/**********************************************************************/

TEST_F(CANOpen, ValidLocalCommandUpdatesTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][0] = 0;		// Packet comes from local source
	commandBuffer[0][1] = 5;		// Data length
	commandBuffer[0][2] = 0x10;		// The RF mode.
	commandBuffer[0][3] = 0x01;		// Configure the mode.
	commandBuffer[0][4] = 0x0;
	commandBuffer[0][5] = 0x0;
	commandBuffer[0][6] = 0x0;
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0x10, SetCANObjectDataRaw_fake.arg0_history[0]);
	EXPECT_EQ(0x01, SetCANObjectDataRaw_fake.arg1_history[0]);
}

TEST_F(CANOpen, LocalFitterMessageCallsTheODForAllDataPresent)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = FITTER_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][0] = 0;		// Packet comes from local source
	commandBuffer[0][1] = 21;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(5, SetCANObjectDataRaw_fake.call_count);
}

TEST_F(CANOpen, LocalAllFitterMessageDataIsPassedIntoTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = FITTER_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][0] = 0;		// Packet comes from local source
	commandBuffer[0][1] = 21;		// Data length at limit
	commandBuffer[0][19] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][20] = 0xAA;	// Should end put into OD 20th.
	commandBuffer[0][21] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][22] = 0xAA;	// Should end put into OD 20th.
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0xAAFFAAFF, SetCANObjectDataRaw_fake.arg1_history[4]);
}

TEST_F(CANOpen, LocalHolemapMessageCallsTheODForAllDataPresent)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = HOLEMAP_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][0] = 0;		// Packet comes from local source
	commandBuffer[0][1] = 21;		// Data length at limit
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(5, SetCANObjectDataRaw_fake.call_count);
}

TEST_F(CANOpen, AllLocalHolemapMessageDataIsPassedIntoTheOD)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = HOLEMAP_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][0] = 0;		// Packet comes from local source
	commandBuffer[0][1] = 21;		// Data length at limit
	commandBuffer[0][19] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][20] = 0xAA;	// Should end put into OD 20th.
	commandBuffer[0][21] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][22] = 0xAA;	// Should end put into OD 20th.
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0xAAFFAAFF, SetCANObjectDataRaw_fake.arg1_history[4]);
}

TEST_F(CANOpen, AllLocalHolemapMessageDataIsPassedIntoTheODWhenOddNumberOfBytes)
{
	xQueueCreateStatic_fake.return_val = 1;
	GetFieldType_fake.return_val = HOLEMAP_FIELD;
	CONFIGURE_MESSAGE_WAITING;
	CONFIGURE_QUEUE_RECIEVE_FAKE;
	commandBuffer[0][0] = 0;		// Packet comes from local source
	commandBuffer[0][1] = 20;		// Data length at limit
	commandBuffer[0][19] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][20] = 0xAA;	// Should end put into OD 20th.
	commandBuffer[0][21] = 0xFF;	// Should end put into OD 20th.
	commandBuffer[0][22] = 0x00;	// Should end put into OD 20th.
	InitialiseCANOpen(0);
	NO_PACKETS_RECEVIED();
	p_CanUpdate();
	EXPECT_EQ(0x00FFAAFF, SetCANObjectDataRaw_fake.arg1_history[4]);
}